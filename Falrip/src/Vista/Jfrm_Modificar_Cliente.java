/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vista;

import Modelo.Region;
import Controlador.Registro;
import Modelo.Cliente;
import Modelo.Comuna;
import Modelo.ProfesionOficio;
import Modelo.Provincia;
import Modelo.Region;
import Modelo.TipoCliente;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author CAMILO
 */
public class Jfrm_Modificar_Cliente extends javax.swing.JFrame {

    /**
     * Creates new form Jfrm_Modificar_Cliente
     */
    public Jfrm_Modificar_Cliente() {
        initComponents();
        cargarRegiones();
        cargarProfesiones();   
        cargarTiposCliente();
        jcbmx_provincia.removeAllItems();
        jcbmx_comuna.removeAllItems();
        jcbmx_provincia.addItem(new Provincia()); // Placeholder
        jcbmx_comuna.addItem(new Comuna());
        cargarComboBoxesIniciales(); // Necesitas cargar Región, Profesión, Tipo al inicio
        habilitarCampos(false); // Campos deshabilitados hasta buscar un cliente
        limpiarCamposModificar(true); // Limpia todo al inicio
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jbtn_buscar = new javax.swing.JButton();
        jtxt_buscar_cl = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jtxt_run = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jtxt_nombreCompleto = new javax.swing.JTextField();
        jtxt_correo = new javax.swing.JTextField();
        jtxt_fono = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jcbmx_region = new javax.swing.JComboBox();
        jcbmx_provincia = new javax.swing.JComboBox();
        jcbmx_comuna = new javax.swing.JComboBox();
        jbtn_actualizar = new javax.swing.JButton();
        jtxt_dia_fc = new javax.swing.JTextField();
        jtxt_mes_fc = new javax.swing.JTextField();
        jtxt_anio_fc = new javax.swing.JTextField();
        jtxt_dia_ins = new javax.swing.JTextField();
        jtxt_mes_ins = new javax.swing.JTextField();
        jtxt_anio_ins = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jtxt_direccion = new javax.swing.JTextField();
        jcmbx_profesion = new javax.swing.JComboBox();
        jcmbx_tipo_cliente = new javax.swing.JComboBox();
        jbtn_limpiar = new javax.swing.JButton();
        jButton1Volver = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setBackground(new java.awt.Color(204, 255, 204));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("Modificar Cliente");

        jbtn_buscar.setText("Buscar");
        jbtn_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_buscarActionPerformed(evt);
            }
        });

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setText("Run");

        jLabel3.setText("Nombre Completo");

        jLabel4.setText("Fecha Nacimiento");

        jLabel5.setText("Fecha Inscripcion");

        jLabel6.setText("Correo");

        jLabel7.setText("Fono");

        jLabel8.setText("Region");

        jLabel9.setText("Provincia");

        jLabel10.setText("Comuna");

        jLabel11.setText("Profesion");

        jtxt_correo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxt_correoActionPerformed(evt);
            }
        });

        jLabel12.setText("Tipo Cliente");

        jcbmx_region.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbmx_region.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbmx_regionItemStateChanged(evt);
            }
        });
        jcbmx_region.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbmx_regionActionPerformed(evt);
            }
        });

        jcbmx_provincia.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbmx_provincia.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbmx_provinciaItemStateChanged(evt);
            }
        });

        jcbmx_comuna.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbmx_comuna.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbmx_comunaItemStateChanged(evt);
            }
        });

        jbtn_actualizar.setText("Actualizar");
        jbtn_actualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_actualizarActionPerformed(evt);
            }
        });

        jLabel13.setText("/");

        jLabel14.setText("/");

        jLabel15.setText("/");

        jLabel16.setText("/");

        jLabel17.setText("Direccion");

        jcmbx_profesion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jcmbx_tipo_cliente.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jbtn_limpiar.setText("Limpiar");
        jbtn_limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_limpiarActionPerformed(evt);
            }
        });

        jButton1Volver.setText("Volver");
        jButton1Volver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1VolverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE))
                        .addGap(19, 19, 19)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jtxt_dia_ins)
                                    .addComponent(jtxt_dia_fc))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jtxt_mes_fc)
                                    .addComponent(jtxt_mes_ins))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jtxt_anio_fc)
                                    .addComponent(jtxt_anio_ins)))
                            .addComponent(jtxt_fono, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                            .addComponent(jtxt_correo)
                            .addComponent(jtxt_nombreCompleto)
                            .addComponent(jtxt_run)
                            .addComponent(jtxt_direccion))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 113, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE))
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jcbmx_comuna, 0, 252, Short.MAX_VALUE)
                            .addComponent(jcmbx_profesion, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jcmbx_tipo_cliente, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(28, 28, 28))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbmx_provincia, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jcbmx_region, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jbtn_limpiar)
                                .addGap(50, 50, 50)
                                .addComponent(jButton1Volver)))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jbtn_actualizar)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jtxt_run, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(jcbmx_comuna, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(jtxt_nombreCompleto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addGap(27, 27, 27)
                                .addComponent(jLabel5))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(jcmbx_profesion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel12)
                                    .addComponent(jcmbx_tipo_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtxt_dia_fc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtxt_mes_fc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtxt_anio_fc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtxt_dia_ins, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtxt_mes_ins, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtxt_anio_ins, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16))))
                .addGap(27, 27, 27)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jtxt_correo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtxt_fono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jtxt_direccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jcbmx_region, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jcbmx_provincia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtn_actualizar)
                    .addComponent(jbtn_limpiar)
                    .addComponent(jButton1Volver))
                .addGap(80, 80, 80))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(jLabel1))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jbtn_buscar)
                                .addGap(18, 18, 18)
                                .addComponent(jtxt_buscar_cl, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 629, Short.MAX_VALUE))
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtn_buscar)
                    .addComponent(jtxt_buscar_cl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtn_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_buscarActionPerformed
                                                      
     
    String runInput = this.jtxt_buscar_cl.getText().trim();
    this.clienteEncontrado = null; // Reset client found status
    limpiarCamposModificar(false); // Clear fields except the search field

    // 1. Validate RUN input
    if (runInput.isEmpty() || !runInput.matches("^[0-9]{1,10}-[0-9Kk]$")) {
        JOptionPane.showMessageDialog(this, "Formato de RUN inválido para buscar (Ej: 1234567890-K).", "Error de Formato", JOptionPane.WARNING_MESSAGE);
        this.jtxt_buscar_cl.requestFocus();
        habilitarCampos(false); // Disable fields if RUN is invalid
        return;
    }

    try {
        // 2. Parse RUN (using long)
        String runLimpio = runInput.replace(".", "").replace("-", "");
        long runNumerico = Long.parseLong(runLimpio.substring(0, runLimpio.length() - 1));

        // 3. Call search method
        Registro rg = new Registro();
        this.clienteEncontrado = rg.buscarPorRun(runNumerico); // Use the corrected method with JOINs

        // 4. Process result
        if (this.clienteEncontrado != null) {
            // Client FOUND!
            prellenarCampos();     // Fill the form fields using the method you copied
            habilitarCampos(true); // Enable fields for editing (except RUN)
            jtxt_run.setEditable(false); // Ensure RUN is not editable after search
            // Optionally set focus to the first editable field, e.g., nombre
            jtxt_nombreCompleto.requestFocus(); 
        } else {
            // Client NOT found
            JOptionPane.showMessageDialog(this, "No se encontró un cliente con el RUN: " + runInput, "Búsqueda sin resultados", JOptionPane.INFORMATION_MESSAGE);
            habilitarCampos(false); // Keep fields disabled
        }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Error al procesar el RUN. Verifique el formato.", "Error de Formato", JOptionPane.ERROR_MESSAGE);
        this.jtxt_buscar_cl.requestFocus();
        habilitarCampos(false);
    } catch (StringIndexOutOfBoundsException e) {
        JOptionPane.showMessageDialog(this, "Error al procesar RUN: Verifique el formato.", "Error Formato RUN", JOptionPane.ERROR_MESSAGE);
        this.jtxt_buscar_cl.requestFocus();
        habilitarCampos(false);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Ocurrió un error inesperado durante la búsqueda: " + e.getMessage(), "Error General", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
        habilitarCampos(false);
    }


    }//GEN-LAST:event_jbtn_buscarActionPerformed

    private void jbtn_limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_limpiarActionPerformed
        // TODO add your handling code here:
        jtxt_run.setText("");
        jtxt_nombreCompleto.setText("");

        //Fecha Nacimiento
        jtxt_dia_fc.setText("");
        jtxt_mes_fc.setText("");
        jtxt_anio_fc.setText("");

        //Fecha inscripcion
        jtxt_dia_ins.setText("");
        jtxt_mes_ins.setText("");
        jtxt_anio_ins.setText("");
        jtxt_correo.setText("");
        jtxt_fono.setText("");
        jtxt_direccion.setText("");

        //Region

        jcbmx_region.setSelectedIndex(0);

        //Combo box

        jcmbx_profesion.setSelectedIndex(0);
        jcmbx_tipo_cliente.setSelectedIndex(0);
        jtxt_run.requestFocus();
    }//GEN-LAST:event_jbtn_limpiarActionPerformed

    private void jbtn_actualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_actualizarActionPerformed

        // 1. Verificar si se ha buscado un cliente
        if (clienteEncontrado == null) {
            JOptionPane.showMessageDialog(this, "Primero debe buscar un cliente exitosamente para poder modificarlo.", "Cliente no cargado", JOptionPane.WARNING_MESSAGE);
            jtxt_buscar_cl.requestFocus(); // Poner foco en el campo de búsqueda (asegúrate que se llame así)
            return;
        }

        try {
            // --- NO LEER RUN (ya lo tenemos en clienteEncontrado) ---
            long numrun = clienteEncontrado.getRun();
            String dvrun = clienteEncontrado.getDvrun();

            // --- 2. LEER Y VALIDAR LOS DEMÁS CAMPOS (igual que en Agregar) ---
            // --- 2. LEER Y VALIDAR LOS DEMÁS CAMPOS ---
            String nombreInput = this.jtxt_nombreCompleto.getText().trim();
            if (nombreInput.isEmpty()) { /*...*/ return; }
            String[] partesNombre = nombreInput.split("\\s+");

            String pnombre = null, snombre = null, appaterno = null, apmaterno = null;

            if (partesNombre.length >= 2) {
                pnombre = partesNombre[0];
                appaterno = partesNombre[partesNombre.length - (partesNombre.length > 2 ? 2 : 1)];
                if (partesNombre.length > 2) {
                    apmaterno = partesNombre[partesNombre.length - 1];
                }
                // ----- INICIO BLOQUE SEGUNDO NOMBRE -----
                if (partesNombre.length > 3) {
                    // Asegúrate que esta línea esté DENTRO del if > 3
                    StringBuilder sbSnombre = new StringBuilder(); // <-- ¿Se llama igual aquí?
                    for(int i=1; i < partesNombre.length - 2; i++){
                        sbSnombre.append(partesNombre[i]).append(" ");
                    }
                    // Asegúrate que esta línea esté DENTRO del if > 3
                    snombre = sbSnombre.toString().trim(); // <-- ¿Y aquí? ¿Hay errores antes?
                }
                // ----- FIN BLOQUE SEGUNDO NOMBRE -----
                else if (partesNombre.length == 3 && apmaterno == null) {
                    apmaterno = partesNombre[2];
                }
            } else {
                // ... (mensaje de error nombre inválido) ...
            }

            // Fechas (Necesitas tener el método parseFecha en esta clase)
            Date fechaNac = parseFecha(this.jtxt_dia_fc.getText(), this.jtxt_mes_fc.getText(), this.jtxt_anio_fc.getText());
            Date fechaIns = parseFecha(this.jtxt_dia_ins.getText(), this.jtxt_mes_ins.getText(), this.jtxt_anio_ins.getText());
            if(fechaIns.before(fechaNac)){ /* Mensaje error fecha */ return; }

            // Correo
            String correo = this.jtxt_correo.getText().trim();
            if (!correo.isEmpty() && !correo.matches("^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$")) { /* Mensaje error correo */ return; }
            if (correo.isEmpty()) correo = null;

            // Fono
            String fonoStr = this.jtxt_fono.getText().trim();
            if(fonoStr.isEmpty() || !fonoStr.matches("^[0-9]+$")){ /* Mensaje error fono */ return; }
            long fono = Long.parseLong(fonoStr);

            // Dirección
            String direccion = this.jtxt_direccion.getText().trim();
            if (direccion.isEmpty()) { /* Mensaje error dirección */ return; }

            // --- 3. OBTENER CÓDIGOS DE COMBOBOXES ---
            Region regionSel = (Region) this.jcbmx_region.getSelectedItem();
            Provincia provSel = (Provincia) this.jcbmx_provincia.getSelectedItem();
            Comuna comSel = (Comuna) this.jcbmx_comuna.getSelectedItem();
            ProfesionOficio profSel = (ProfesionOficio) this.jcmbx_profesion.getSelectedItem();
            TipoCliente tipoSel = (TipoCliente) this.jcmbx_tipo_cliente.getSelectedItem();

            if (regionSel == null || regionSel.getCodRegion() == 0 ||
                provSel == null || provSel.getCodProvincia() == 0 ||
                comSel == null || comSel.getCodComuna() == 0 ||
                profSel == null || profSel.getCodProfOfic() == 0 ||
                tipoSel == null || tipoSel.getCodTipoCliente() == 0) {
                JOptionPane.showMessageDialog(this, "Debe seleccionar todas las opciones de las listas.", "Datos incompletos", JOptionPane.WARNING_MESSAGE);
                return;
            }

            int codRegion = regionSel.getCodRegion();
            int codProvincia = provSel.getCodProvincia();
            int codComuna = comSel.getCodComuna();
            int codProfesion = profSel.getCodProfOfic();
            int codTipoCliente = tipoSel.getCodTipoCliente();

            // --- 4. CONSTRUIR OBJETO Cliente CON DATOS ACTUALIZADOS ---
            Cliente cliModificado = new Cliente();
            cliModificado.setRun((int) numrun); // <-- USA EL RUN ORIGINAL
            cliModificado.setDvrun(dvrun);
            cliModificado.setPnombre(pnombre); cliModificado.setSnombre(snombre);
            cliModificado.setAppaterno(appaterno); cliModificado.setApmaterno(apmaterno);
            cliModificado.setFechaNacimiento(fechaNac); cliModificado.setFechaInscripcion(fechaIns);
            cliModificado.setCorreo(correo); cliModificado.setFonoContacto((int) fono);
            cliModificado.setDireccion(direccion);
            // Asignar códigos a objetos anidados
            Region reg = new Region(); reg.setCodRegion(codRegion); cliModificado.setReg(reg);
            Provincia prov = new Provincia(); prov.setCodProvincia(codProvincia); cliModificado.setProv(prov);
            Comuna com = new Comuna(); com.setCodComuna(codComuna); cliModificado.setCom(com);
            ProfesionOficio prof = new ProfesionOficio(); prof.setCodProfOfic(codProfesion); cliModificado.setProf(prof);
            TipoCliente tipo = new TipoCliente(); tipo.setCodTipoCliente(codTipoCliente); cliModificado.setTipocl(tipo);
            // Si editas categoría, agrégala aquí
            cliModificado.setCategoria(clienteEncontrado.getCategoria() != null ? clienteEncontrado.getCategoria() : "Bronce");

            // --- 5. LLAMAR AL MÉTODO modificarCliente DE Registro ---
            Registro rg = new Registro();
            if (rg.modificarCliente(cliModificado)) { // Llama al método UPDATE
                JOptionPane.showMessageDialog(this, "Cliente RUN " + numrun + "-" + dvrun + " modificado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                limpiarCamposModificar(true); // Limpia todo, incluyendo búsqueda
                habilitarCampos(false);    // Deshabilita campos
                clienteEncontrado = null;  // Resetea cliente encontrado
            } else {
                JOptionPane.showMessageDialog(this, "Error: No se pudo modificar el cliente. Verifique la consola.", "Error BD", JOptionPane.ERROR_MESSAGE);
            }

        } catch (NumberFormatException e) { /* ... */ }
        catch (java.text.ParseException e) { /* ... */ }
        catch (ArrayIndexOutOfBoundsException | StringIndexOutOfBoundsException e) { /* ... */ }
        catch (ClassCastException e) { /* ... */ e.printStackTrace(); }
        catch (Exception e) { /* ... */ e.printStackTrace(); }
        }

        // --- ASEGÚRATE DE TENER TAMBIÉN EL MÉTODO parseFecha ---
        private java.util.Date parseFecha(String dia, String mes, String anio) throws java.text.ParseException {
            // ... (El código de parseFecha) ...
            if (dia.trim().isEmpty() || mes.trim().isEmpty() || anio.trim().isEmpty()) { throw new java.text.ParseException("Campos de fecha vacíos", 0); }
            try { Integer.parseInt(dia); Integer.parseInt(mes); Integer.parseInt(anio); } catch (NumberFormatException e) { throw new java.text.ParseException("Fecha debe contener solo números", 0); }
            String fechaStr = dia.trim() + "/" + mes.trim() + "/" + anio.trim();
            SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
            formato.setLenient(false);
            return formato.parse(fechaStr);
    }//GEN-LAST:event_jbtn_actualizarActionPerformed

    private void jcbmx_comunaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbmx_comunaItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbmx_comunaItemStateChanged

    private void jcbmx_provinciaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbmx_provinciaItemStateChanged
        // TODO add your handling code here:

        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            Provincia provSeleccionada = (Provincia) this.jcbmx_provincia.getSelectedItem();

            this.jcbmx_comuna.removeAllItems();

            // ¡Validación de seguridad!
            if (provSeleccionada != null && provSeleccionada.getCodProvincia() > 0) {
                int idProvincia = provSeleccionada.getCodProvincia();
                Registro rg = new Registro();
                List<Comuna> comunas = rg.obtenerComunasPorProvincia(idProvincia);

                this.jcbmx_comuna.addItem(new Comuna()); // Agregamos el "Seleccione..."
                for (Comuna com : comunas) {
                    this.jcbmx_comuna.addItem(com);
                }
            }
        }
    }//GEN-LAST:event_jcbmx_provinciaItemStateChanged

    private void jcbmx_regionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbmx_regionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbmx_regionActionPerformed

    private void jcbmx_regionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbmx_regionItemStateChanged

        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            Region regionSeleccionada = (Region) this.jcbmx_region.getSelectedItem();

            this.jcbmx_provincia.removeAllItems();
            this.jcbmx_comuna.removeAllItems();

            // ¡Validación de seguridad!
            if (regionSeleccionada != null && regionSeleccionada.getCodRegion() > 0) {
                int idRegion = regionSeleccionada.getCodRegion();
                Registro rg = new Registro();
                List<Provincia> provincias = rg.obtenerProvinciasPorRegion(idRegion);

                this.jcbmx_provincia.addItem(new Provincia()); // Agregamos el "Seleccione..."
                for (Provincia prov : provincias) {
                    this.jcbmx_provincia.addItem(prov);
                }
            }
        }
    }//GEN-LAST:event_jcbmx_regionItemStateChanged

    private void jtxt_correoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxt_correoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtxt_correoActionPerformed

    private void jButton1VolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1VolverActionPerformed
        // TODO add your handling code here:
        Jfrm_Clientes_Lista ventanaMenu = new Jfrm_Clientes_Lista(); 
        ventanaMenu.setVisible(true);
        ventanaMenu.setLocationRelativeTo(null); // Centrar el menú

        // 2. Cerrar esta ventana de auditoría
        this.dispose();
    }//GEN-LAST:event_jButton1VolverActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Jfrm_Modificar_Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Jfrm_Modificar_Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Jfrm_Modificar_Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Jfrm_Modificar_Cliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Jfrm_Modificar_Cliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1Volver;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JButton jbtn_actualizar;
    private javax.swing.JButton jbtn_buscar;
    private javax.swing.JButton jbtn_limpiar;
    private javax.swing.JComboBox jcbmx_comuna;
    private javax.swing.JComboBox jcbmx_provincia;
    private javax.swing.JComboBox jcbmx_region;
    private javax.swing.JComboBox jcmbx_profesion;
    private javax.swing.JComboBox jcmbx_tipo_cliente;
    private javax.swing.JTextField jtxt_anio_fc;
    private javax.swing.JTextField jtxt_anio_ins;
    private javax.swing.JTextField jtxt_buscar_cl;
    private javax.swing.JTextField jtxt_correo;
    private javax.swing.JTextField jtxt_dia_fc;
    private javax.swing.JTextField jtxt_dia_ins;
    private javax.swing.JTextField jtxt_direccion;
    private javax.swing.JTextField jtxt_fono;
    private javax.swing.JTextField jtxt_mes_fc;
    private javax.swing.JTextField jtxt_mes_ins;
    private javax.swing.JTextField jtxt_nombreCompleto;
    private javax.swing.JTextField jtxt_run;
    // End of variables declaration//GEN-END:variables
private void cargarRegiones() {
    Registro rg = new Registro();
    List<Region> regiones = rg.obtenerRegiones();
    
    this.jcbmx_region.removeAllItems();
    
    // Agregamos un item "nulo" para que sirva como "Seleccione..."
    this.jcbmx_region.addItem(new Region()); 

    for (Region region : regiones) {
        this.jcbmx_region.addItem(region); // Agregamos el OBJETO completo
    }
}
private void cargarProfesiones() {
    Registro rg = new Registro();
    List<ProfesionOficio> profesiones = rg.obtenerProfesiones();
    
    this.jcmbx_profesion.removeAllItems();
    this.jcmbx_profesion.addItem(new ProfesionOficio()); // Agrega el item "Seleccione..."

    for (ProfesionOficio prof : profesiones) {
        this.jcmbx_profesion.addItem(prof); // Agregamos el OBJETO
    }
}

private void cargarTiposCliente() {
    Registro rg = new Registro();
    List<TipoCliente> tipos = rg.obtenerTiposCliente();
    
    this.jcmbx_tipo_cliente.removeAllItems();
    this.jcmbx_tipo_cliente.addItem(new TipoCliente()); // Agrega el item "Seleccione..."

    for (TipoCliente tipo : tipos) {
        this.jcmbx_tipo_cliente.addItem(tipo); // Agregamos el OBJETO
    }
}

//MEtodos
private void limpiarCamposModificar(boolean limpiarBusqueda) {
    if (limpiarBusqueda) {
        jtxt_buscar_cl.setText("");
    }
    jtxt_run.setText(""); // Este mostrará el RUN encontrado, pero lo limpiamos aquí
    jtxt_nombreCompleto.setText("");
    jtxt_dia_fc.setText(""); jtxt_mes_fc.setText(""); jtxt_anio_fc.setText("");
    jtxt_dia_ins.setText(""); jtxt_mes_ins.setText(""); jtxt_anio_ins.setText("");
    jtxt_correo.setText("");
    jtxt_fono.setText("");
    jtxt_direccion.setText(""); 
    
    // Solo resetear ComboBoxes si no hay cliente cargado (o si limpias todo)
    if (clienteEncontrado == null || limpiarBusqueda) {
        // Resetear ComboBoxes
        if(jcbmx_region.getItemCount() > 0) jcbmx_region.setSelectedIndex(0); 
        jcbmx_provincia.removeAllItems(); jcbmx_provincia.addItem(new Provincia()); 
        jcbmx_comuna.removeAllItems();    jcbmx_comuna.addItem(new Comuna());       
        if(jcmbx_profesion.getItemCount() > 0) jcmbx_profesion.setSelectedIndex(0);    
        if(jcmbx_tipo_cliente.getItemCount() > 0) jcmbx_tipo_cliente.setSelectedIndex(0); 
    }
    
    if (limpiarBusqueda) {
         jtxt_buscar_cl.requestFocus();
    }
}

private void habilitarCampos(boolean habilitar) {
    // RUN nunca se edita después de buscar
    jtxt_run.setEditable(false); 

    
    jtxt_nombreCompleto.setEditable(habilitar);
    jtxt_dia_fc.setEditable(habilitar); 
    jtxt_mes_fc.setEditable(habilitar); 
    jtxt_anio_fc.setEditable(habilitar);
    jtxt_dia_ins.setEditable(habilitar); 
    jtxt_mes_ins.setEditable(habilitar); 
    jtxt_anio_ins.setEditable(habilitar);
    jtxt_correo.setEditable(habilitar);
    jtxt_fono.setEditable(habilitar);
    jtxt_direccion.setEditable(habilitar);
    
    jcbmx_region.setEnabled(habilitar);
    jcbmx_provincia.setEnabled(habilitar);
    jcbmx_comuna.setEnabled(habilitar);
    jcmbx_profesion.setEnabled(habilitar);
    jcmbx_tipo_cliente.setEnabled(habilitar);
    

}
private Cliente clienteEncontrado = null;
private void prellenarCampos() {
    // Verificar si se encontró un cliente al buscar
    if (clienteEncontrado == null) {
        System.out.println("DEBUG: prellenarCampos llamado sin clienteEncontrado."); // Mensaje de depuración
        return; 
    }
    
    System.out.println("DEBUG: Prellenando campos para RUN: " + clienteEncontrado.getRun()); // Mensaje de depuración

    try {
        // --- Llenar Campos de Texto 
        jtxt_run.setText(clienteEncontrado.getRun() + "-" + clienteEncontrado.getDvrun());
        // jtxt_run ya está no editable desde habilitarCampos(false) y buscar

        String nombreCompleto = ( (clienteEncontrado.getPnombre() != null ? clienteEncontrado.getPnombre() : "") + " " +
                                  (clienteEncontrado.getSnombre() != null ? clienteEncontrado.getSnombre() : "") + " " +
                                  (clienteEncontrado.getAppaterno() != null ? clienteEncontrado.getAppaterno() : "") + " " +
                                  (clienteEncontrado.getApmaterno() != null ? clienteEncontrado.getApmaterno() : "")
                                ).trim().replaceAll("\\s+", " ");
        jtxt_nombreCompleto.setText(nombreCompleto);

        jtxt_correo.setText(clienteEncontrado.getCorreo() != null ? clienteEncontrado.getCorreo() : "");
        jtxt_fono.setText(String.valueOf(clienteEncontrado.getFonoContacto())); // Convertir long
        jtxt_direccion.setText(clienteEncontrado.getDireccion() != null ? clienteEncontrado.getDireccion() : "");

        // --- Llenar Fechas (Necesita formateo extra) ---
        SimpleDateFormat sdfDia = new SimpleDateFormat("dd");
        SimpleDateFormat sdfMes = new SimpleDateFormat("MM");
        SimpleDateFormat sdfAnio = new SimpleDateFormat("yyyy");

        if (clienteEncontrado.getFechaNacimiento() != null) {
            jtxt_dia_fc.setText(sdfDia.format(clienteEncontrado.getFechaNacimiento()));
            jtxt_mes_fc.setText(sdfMes.format(clienteEncontrado.getFechaNacimiento()));
            jtxt_anio_fc.setText(sdfAnio.format(clienteEncontrado.getFechaNacimiento()));
        } else {
             jtxt_dia_fc.setText(""); jtxt_mes_fc.setText(""); jtxt_anio_fc.setText("");
        }

        if (clienteEncontrado.getFechaInscripcion() != null) {
            jtxt_dia_ins.setText(sdfDia.format(clienteEncontrado.getFechaInscripcion()));
            jtxt_mes_ins.setText(sdfMes.format(clienteEncontrado.getFechaInscripcion()));
            jtxt_anio_ins.setText(sdfAnio.format(clienteEncontrado.getFechaInscripcion()));
        } else {
             jtxt_dia_ins.setText(""); jtxt_mes_ins.setText(""); jtxt_anio_ins.setText("");
        }

        // --- Seleccionar ComboBoxes (Usa el método ayudante) ---

        // Obtener IDs (Similar a tu ejemplo con categoria.getIdCategoria())
        int regionId = (clienteEncontrado.getReg() != null) ? clienteEncontrado.getReg().getCodRegion() : 0;
        int provId = (clienteEncontrado.getProv() != null) ? clienteEncontrado.getProv().getCodProvincia() : 0;
        int comId = (clienteEncontrado.getCom() != null) ? clienteEncontrado.getCom().getCodComuna() : 0;
        int profId = (clienteEncontrado.getProf() != null) ? clienteEncontrado.getProf().getCodProfOfic() : 0;
        int tipoId = (clienteEncontrado.getTipocl() != null) ? clienteEncontrado.getTipocl().getCodTipoCliente() : 0;
        
        System.out.println("DEBUG: IDs obtenidos - Reg:" + regionId + " Prov:" + provId + " Com:" + comId + " Prof:" + profId + " Tipo:" + tipoId); // Mensaje de depuración


        // Seleccionar Región
        seleccionarItemPorId(jcbmx_region, regionId);

        // Cargar Provincias de esa Región ANTES de seleccionar
        if (regionId > 0) {
            cargarProvinciasDeRegion(regionId); // Carga la lista
            seleccionarItemPorId(jcbmx_provincia, provId); // Ahora selecciona
        } else {
             jcbmx_provincia.removeAllItems(); jcbmx_provincia.addItem(new Provincia()); // Limpiar si no hay región
        }


        // Cargar Comunas de esa Provincia ANTES de seleccionar
        if (provId > 0) {
            cargarComunasDeProvincia(provId); // Carga la lista (Asegúrate que este método funcione solo con provId)
            seleccionarItemPorId(jcbmx_comuna, comId); // Ahora selecciona
        } else {
             jcbmx_comuna.removeAllItems(); jcbmx_comuna.addItem(new Comuna()); // Limpiar si no hay provincia
        }


        // Seleccionar Profesión y Tipo Cliente
        seleccionarItemPorId(jcmbx_profesion, profId);
        seleccionarItemPorId(jcmbx_tipo_cliente, tipoId);
        
        System.out.println("DEBUG: Campos prellenados."); // Mensaje de depuración


    } catch (Exception e) {
        System.err.println("Error al prellenar campos: " + e.getMessage());
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al cargar los datos del cliente en el formulario.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}

// --- ¡¡ASEGÚRATE DE TENER ESTOS MÉTODOS TAMBIÉN EN TU CLASE!! ---
// (Son los mismos que te di en la respuesta anterior)


private void seleccionarItemPorId(javax.swing.JComboBox comboBox, int id) {
   // ... (Código del método seleccionarItemPorId) ...
     if (id == 0) { comboBox.setSelectedIndex(0); return; }
     for (int i = 0; i < comboBox.getItemCount(); i++) {
        Object item = comboBox.getItemAt(i);
        if (item != null) {
            if (item instanceof Region && ((Region) item).getCodRegion() == id) { comboBox.setSelectedIndex(i); System.out.println("DEBUG: Region seleccionada index " + i); return; }
            if (item instanceof Provincia && ((Provincia) item).getCodProvincia() == id) { comboBox.setSelectedIndex(i); System.out.println("DEBUG: Provincia seleccionada index " + i); return; }
            if (item instanceof Comuna && ((Comuna) item).getCodComuna() == id) { comboBox.setSelectedIndex(i); System.out.println("DEBUG: Comuna seleccionada index " + i); return; }
            if (item instanceof ProfesionOficio && ((ProfesionOficio) item).getCodProfOfic() == id) { comboBox.setSelectedIndex(i); System.out.println("DEBUG: Profesion seleccionada index " + i); return; }
            if (item instanceof TipoCliente && ((TipoCliente) item).getCodTipoCliente() == id) { comboBox.setSelectedIndex(i); System.out.println("DEBUG: TipoCliente seleccionado index " + i); return; }
        }
     }
      System.out.println("DEBUG: ID " + id + " no encontrado en ComboBox, seleccionando índice 0."); // Mensaje de depuración
     comboBox.setSelectedIndex(0); // Si no se encuentra, seleccionar el primero
}


// Método para cargar Provincias (necesario para prellenar)
private void cargarProvinciasDeRegion(int idRegion) {
    // ... (Código del método cargarProvinciasDeRegion) ...
    System.out.println("DEBUG: Cargando provincias para Region ID: " + idRegion); // Mensaje de depuración
    Registro rg = new Registro();
    List<Provincia> provincias = rg.obtenerProvinciasPorRegion(idRegion);
    jcbmx_provincia.removeAllItems();
    jcbmx_provincia.addItem(new Provincia());
    for (Provincia prov : provincias) { jcbmx_provincia.addItem(prov); }
    System.out.println("DEBUG: Provincias cargadas: " + provincias.size()); // Mensaje de depuración
}

// Método para cargar Comunas (necesario para prellenar)
private void cargarComunasDeProvincia(int idProvincia) {
    // ... (Código del método cargarComunasDeProvincia) ...
     System.out.println("DEBUG: Cargando comunas para Provincia ID: " + idProvincia); // Mensaje de depuración
     Registro rg = new Registro();
     List<Comuna> comunas = rg.obtenerComunasPorProvincia(idProvincia);
     jcbmx_comuna.removeAllItems();
     jcbmx_comuna.addItem(new Comuna());
     for (Comuna com : comunas) { jcbmx_comuna.addItem(com); }
     System.out.println("DEBUG: Comunas cargadas: " + comunas.size()); // Mensaje de depuración
}

private void cargarComboBoxesIniciales() {
    System.out.println("DEBUG: Cargando ComboBoxes iniciales..."); // Mensaje de depuración
    
    // 1. Cargar los ComboBoxes independientes
    cargarRegiones();       // Carga la lista de regiones
    cargarProfesiones();    // Carga la lista de profesiones
    cargarTiposCliente();   // Carga la lista de tipos de cliente

    // 2. Limpiar los ComboBoxes dependientes y poner placeholder
    jcbmx_provincia.removeAllItems(); 
    jcbmx_provincia.addItem(new Provincia()); // Agrega "Seleccione Provincia"
    
    jcbmx_comuna.removeAllItems();    
    jcbmx_comuna.addItem(new Comuna());       // Agrega "Seleccione Comuna"
    
    System.out.println("DEBUG: ComboBoxes iniciales cargados y dependientes limpiados."); // Mensaje de depuración
}
}