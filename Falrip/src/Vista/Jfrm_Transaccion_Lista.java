/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Vista;

import Controlador.RegistroTrans;
import Modelo.TransaccionTarjetaCliente; // Asegúrate que esta clase exista y esté correcta
import java.text.SimpleDateFormat;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.awt.Color;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;

/**
 *
 * @author Fabian
 */
public class Jfrm_Transaccion_Lista extends javax.swing.JFrame {

    
    /**
     * Creates new form Jfrm_Transaccion_Lista
     */
    public Jfrm_Transaccion_Lista() {
        initComponents();
        String placeholder = "Ingrese el RUN del cliente sin DV";

    // Define los colores
    Color colorSugerencia = Color.GRAY;
    Color colorNormal = Color.BLACK;

    // 1. Establece el estado inicial (el texto gris)
    jtxt_buscar_run.setText(placeholder);
    jtxt_buscar_run.setForeground(colorSugerencia);

    // 2. Añade el "listener" que reacciona a los clics
    jtxt_buscar_run.addFocusListener(new FocusAdapter() {

        // Se ejecuta cuando haces CLIC DENTRO del campo
        @Override
        public void focusGained(FocusEvent e) {
            // Si el texto es el de sugerencia, lo borra y pone el color normal
            if (jtxt_buscar_run.getText().equals(placeholder)) {
                jtxt_buscar_run.setText("");
                jtxt_buscar_run.setForeground(colorNormal);
            }
        }

        // Se ejecuta cuando haces CLIC FUERA del campo
        @Override
        public void focusLost(FocusEvent e) {
            // Si el campo quedó vacío, restaura la sugerencia
            if (jtxt_buscar_run.getText().isEmpty()) {
                jtxt_buscar_run.setText(placeholder);
                jtxt_buscar_run.setForeground(colorSugerencia);
            }
        }
    });
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPanel = new javax.swing.JScrollPane();
        jtbl_transaccion = new javax.swing.JTable();
        jButton3Modificar = new javax.swing.JButton();
        jbtn_listar = new javax.swing.JButton();
        jbtn_buscar = new javax.swing.JButton();
        jtxt_buscar_run = new javax.swing.JTextField();
        jbtn_eliminar = new javax.swing.JButton();
        jButton1Volver = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("Lista Transacciones");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(494, 494, 494)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addContainerGap(56, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        jtbl_transaccion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Nº Transacción", "Fecha", "Monto", "Cuotas", "Monto Total", "Nº Tarjeta", "Tipo Transacción"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPanel.setViewportView(jtbl_transaccion);

        jButton3Modificar.setText("Modificar");
        jButton3Modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ModificarActionPerformed(evt);
            }
        });

        jbtn_listar.setText("Listar");
        jbtn_listar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_listarActionPerformed(evt);
            }
        });

        jbtn_buscar.setText("Buscar");
        jbtn_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_buscarActionPerformed(evt);
            }
        });

        jtxt_buscar_run.setForeground(new java.awt.Color(214, 214, 214));
        jtxt_buscar_run.setText("Ingrese el RUN del cliente sin DV");
        jtxt_buscar_run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxt_buscar_runActionPerformed(evt);
            }
        });

        jbtn_eliminar.setText("Eliminar");
        jbtn_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtn_eliminarActionPerformed(evt);
            }
        });

        jButton1Volver.setText("Volver");
        jButton1Volver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1VolverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1622, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1Volver)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jbtn_buscar, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                                    .addComponent(jbtn_listar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(138, 138, 138)
                                        .addComponent(jButton3Modificar, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(151, 151, 151)
                                        .addComponent(jbtn_eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jtxt_buscar_run, javax.swing.GroupLayout.PREFERRED_SIZE, 697, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1Volver)
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtxt_buscar_run, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtn_buscar))
                .addGap(50, 50, 50)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3Modificar)
                    .addComponent(jbtn_listar)
                    .addComponent(jbtn_eliminar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(jScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 477, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtn_listarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_listarActionPerformed

    // --- CORRECCIÓN: Usar RegistroTrans ---
    RegistroTrans registro = new RegistroTrans();
    DefaultTableModel modelo = (DefaultTableModel) this.jtbl_transaccion.getModel();
    modelo.setRowCount(0); // Limpiar tabla

    try {
        // --- CORRECCIÓN: Llamar al nuevo método y usar la lista correcta ---
        List<TransaccionTarjetaCliente> listaTransacciones = registro.listarTodasLasTransacciones();

        if (listaTransacciones.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay transacciones registradas.", "Información", JOptionPane.INFORMATION_MESSAGE);
            return;
        }

        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy"); // Formato de fecha

        // --- CORRECCIÓN: Recorrer la lista de Transacciones ---
        for (TransaccionTarjetaCliente tx : listaTransacciones) {
            String fechaFormateada = (tx.getFechaTransaccion() != null) ? sdf.format(tx.getFechaTransaccion()) : "";

            // --- CORRECCIÓN: Crear la fila con los datos de la Transacción ---
            Object[] fila = {
                tx.getNroTransaccion(),
                fechaFormateada,
                tx.getMontoTransaccion(),
                tx.getTotalCuotasTransaccion(),
                tx.getMontoTotalTransaccion(),
                // Manejar posibles nulos en las relaciones
                (tx.getTarjeta() != null) ? tx.getTarjeta().getNroTarjeta() : "N/A",
                (tx.getTipoTransaccion() != null) ? tx.getTipoTransaccion().getNombreTptranTarjeta() : "N/A"
            };
            modelo.addRow(fila);
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al cargar las transacciones: " + e.getMessage(),
                "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace(); // Imprime el error detallado en la consola, útil para depurar
    }
    }//GEN-LAST:event_jbtn_listarActionPerformed

    private void jbtn_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_buscarActionPerformed
        // TODO add your handling code here:
        String runStr = this.jtxt_buscar_run.getText().trim();
        if (runStr.isEmpty() || runStr.equals("Ingrese RUN sin DV")) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese un RUN.", "Campo Vacío", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int runCliente;
        try {
            runCliente = Integer.parseInt(runStr);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El RUN ingresado no es un número válido.", "Error de Formato", JOptionPane.ERROR_MESSAGE);
            jtxt_buscar_run.requestFocus(); // Pone el foco de nuevo en el campo
            return;
        }

        DefaultTableModel modelo = (DefaultTableModel) this.jtbl_transaccion.getModel();
        modelo.setRowCount(0);

        RegistroTrans registro = new RegistroTrans();
        List<TransaccionTarjetaCliente> listaTransacciones = registro.listarTransaccionesPorCliente(runCliente);

        if (listaTransacciones.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No se encontraron transacciones para el RUN ingresado.", "Sin Resultados", JOptionPane.INFORMATION_MESSAGE);
        } else {
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");

            for (TransaccionTarjetaCliente tx : listaTransacciones) {
                String fechaFormateada = (tx.getFechaTransaccion() != null) ? sdf.format(tx.getFechaTransaccion()) : "";

                Object[] fila = {
                    tx.getNroTransaccion(),
                    fechaFormateada,
                    tx.getMontoTransaccion(),
                    tx.getTotalCuotasTransaccion(),
                    tx.getMontoTotalTransaccion(),
                    (tx.getTarjeta() != null) ? tx.getTarjeta().getNroTarjeta() : "N/A",
                    (tx.getTipoTransaccion() != null) ? tx.getTipoTransaccion().getNombreTptranTarjeta() : "N/A"
                };
                modelo.addRow(fila);
            }
        }
    }//GEN-LAST:event_jbtn_buscarActionPerformed

    private void jtxt_buscar_runActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxt_buscar_runActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtxt_buscar_runActionPerformed

    private void jButton1VolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1VolverActionPerformed
        // TODO add your handling code here:
        Jfrm_Menu ventanaMenu = new Jfrm_Menu(); 
        ventanaMenu.setVisible(true);
        ventanaMenu.setLocationRelativeTo(null); // Centrar el menú

        // 2. Cerrar esta ventana de auditoría
        this.dispose();
    }//GEN-LAST:event_jButton1VolverActionPerformed

    
    private double calcularMontoTotal(double monto, String tipoTransaccion) {

        double tasaInteres = 0.0; // Porcentaje de interés

        if (tipoTransaccion.equals("S.per Avance en Efectivo")) {
            // Regla 2: S.per Avance (Tipo 103)
            tasaInteres = 0.10; // 10%
        } else {
            // Regla 1: Compras Retail (101) y Avance en Efectivo (102)
            tasaInteres = 0.05; // 5%
        }

        // Calcula el monto total: Monto + (Monto * Interés)
        // Usamos Math.round para evitar problemas con decimales largos
        double montoTotal = monto + (monto * tasaInteres);
        return Math.round(montoTotal);
    }


    
    
    
    
    
    
    private void jButton3ModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ModificarActionPerformed
        // TODO add your handling code here:
        // Fuerza a la JTable a detener la edición y guardar el valor
        if (jtbl_transaccion.isEditing()) {
            jtbl_transaccion.getCellEditor().stopCellEditing();
        }

        int filaSeleccionada = jtbl_transaccion.getSelectedRow();

        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione la transacción que desea modificar.", "Ninguna Fila Seleccionada", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            // --- 1. OBTENER DATOS DE LA TABLA ---

            // --- Claves (Columnas NO editables) ---
            int nroTransaccion = Integer.parseInt(jtbl_transaccion.getValueAt(filaSeleccionada, 0).toString());
            long nroTarjeta = Long.parseLong(jtbl_transaccion.getValueAt(filaSeleccionada, 5).toString());

            // --- Datos para la lógica (NO editables) ---
            String tipoTransaccion = jtbl_transaccion.getValueAt(filaSeleccionada, 6).toString();
            // Leemos las cuotas solo para pasarlas al UPDATE, no para el cálculo
            int cuotas = Integer.parseInt(jtbl_transaccion.getValueAt(filaSeleccionada, 3).toString());

            // --- Dato Nuevo (La única columna editable) ---
            double nuevoMonto = Double.parseDouble(jtbl_transaccion.getValueAt(filaSeleccionada, 2).toString());


            // --- 2. CALCULAR EL NUEVO MONTO TOTAL ---
            // La nueva función solo necesita el monto y el tipo
            double nuevoMontoTotal = calcularMontoTotal(nuevoMonto, tipoTransaccion);


            // --- 3. CONFIRMAR Y LLAMAR AL MÉTODO ---
            int confirmacion = JOptionPane.showConfirmDialog(this,
                    "El nuevo Monto Total calculado será: $" + nuevoMontoTotal + "\n¿Desea confirmar la modificación?",
                    "Confirmar Modificación", JOptionPane.YES_NO_OPTION);

            if (confirmacion == JOptionPane.YES_OPTION) {
                RegistroTrans registro = new RegistroTrans();

                // Llamamos al método 'modificar' con los datos actualizados
                // Le pasamos 'cuotas' aunque no se usó en el cálculo
                boolean exito = registro.modificar(nroTransaccion, nroTarjeta, nuevoMonto, cuotas, nuevoMontoTotal);

                if (exito) {
                    JOptionPane.showMessageDialog(this, "Transacción modificada correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                    // Refrescar la fila en la tabla para que se vea el nuevo Monto Total
                    jtbl_transaccion.setValueAt(nuevoMontoTotal, filaSeleccionada, 4); 
                } else {
                    JOptionPane.showMessageDialog(this, "No se pudo modificar la transacción.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Error al leer los datos. Asegúrese de que el monto (ej: 5000.0) es un número válido.", "Error de Formato", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Ocurrió un error inesperado: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
        
    }//GEN-LAST:event_jButton3ModificarActionPerformed

    private void jbtn_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtn_eliminarActionPerformed
       int filaSeleccionada = jtbl_transaccion.getSelectedRow();

        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Seleccione la transacción que desea eliminar.", "Ninguna Fila Seleccionada", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Object transObj = jtbl_transaccion.getValueAt(filaSeleccionada, 0);

   
        int nroTransaccion = Integer.parseInt(transObj.toString());
        
        Object tarjetaObj = jtbl_transaccion.getValueAt(filaSeleccionada, 5);
        long nroTarjeta = Long.parseLong(tarjetaObj.toString());
        
        int confirmacion = JOptionPane.showConfirmDialog(this,
                "¿Está seguro de que desea eliminar la transacción N° " + nroTransaccion + " de la tarjeta N° " + nroTarjeta + "?",
                "Confirmar Eliminación", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

        if (confirmacion == JOptionPane.YES_OPTION) {
            RegistroTrans registro = new RegistroTrans();

            // Llamada corregida con AMBOS argumentos
            boolean exito = registro.eliminar(nroTransaccion, nroTarjeta); 

            // --- FIN DE CAMBIOS ---

            if (exito) {
                JOptionPane.showMessageDialog(this, "Transacción eliminada correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                // Volver a cargar la tabla para reflejar el cambio
                 if (!jtxt_buscar_run.getText().equals("Ingrese RUN sin DV") && !jtxt_buscar_run.getText().isEmpty()){
                     jbtn_buscarActionPerformed(null);
                 } else {
                     ((DefaultTableModel)jtbl_transaccion.getModel()).removeRow(filaSeleccionada);
                 }
            } else {
                // El mensaje de error de la consola (SQLException) ya es detallado
                JOptionPane.showMessageDialog(this, "No se pudo eliminar la transacción. Revise la consola para detalles.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jbtn_eliminarActionPerformed
    
    
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        // Decide qué hacer: si hay un RUN, busca de nuevo. Si no, lista todo.
        String runStr = jtxt_buscar_run.getText().trim();
        if (!runStr.isEmpty() && !runStr.equals("Ingrese RUN sin DV")) {
            jbtn_buscarActionPerformed(evt); // Vuelve a buscar por el RUN actual
        } else {
            jbtn_listarActionPerformed(evt); // Lista todas las transacciones
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Jfrm_Transaccion_Lista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Jfrm_Transaccion_Lista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Jfrm_Transaccion_Lista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Jfrm_Transaccion_Lista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Jfrm_Transaccion_Lista().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1Volver;
    private javax.swing.JButton jButton3Modificar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPanel;
    private javax.swing.JButton jbtn_buscar;
    private javax.swing.JButton jbtn_eliminar;
    private javax.swing.JButton jbtn_listar;
    private javax.swing.JTable jtbl_transaccion;
    private javax.swing.JTextField jtxt_buscar_run;
    // End of variables declaration//GEN-END:variables
}
